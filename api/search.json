[{"id":"f9f08745fe41b11b814681bf11261c97","title":"Vue创建前端项目","content":"1.Vue项目创建前必备环境\n前端主流编辑器VSCode安装,安装地址：https://code.visualstudio.com/Download\n开发环境Node和Npm下载搭建，Node安装包地址：http://nodejs.cn/download/，因为新版的Node安装时已集成了npm所以npm一并安装好了\n切换npm镜像源为淘宝镜像源，因为国内直接使用npm的官方镜像非常慢，所以用淘宝镜像源，命令如下：npm install -g cnpm –registry&#x3D;https://registry.npm.taobao.org，安装完成后即可使用cnpm安装模块了：cnpm install [name]\n\n2.新版Vue+脚手架Vue-Cli4.3安装1.Vue简介：⼀套⽤于构建⽤户界⾯的渐进式框架。与其它⼤型框架不同的是，Vue 被设计为可以 ⾃底向上逐层应⽤。Vue 的核⼼库只关注视图层，不仅易于上⼿，还便于与第三⽅库或既有项⽬整 合. ⽂档：https://cn.vuejs.org/\n\n安装新版Vue（这个方法一般不用直接用下方的cli安装更好）\n\nnpm install vue (可以不⽤)\n\n2.Vue-CliI为Vue 提供了⼀个官⽅的 CLI，为单⻚⾯应⽤ (SPA) 快速搭建繁杂的脚⼿架\n安装 新版vue-cli\ncnpm install -g @vue&#x2F;cli\n\ncnpm install -g @vue&#x2F;cli-init\n\n3.使用vue-cli创建前端项目\n进入到前端项目所存放项目的文件夹下的命令行，例如我存放的位置E:\\study\\srpingboot\\Biology Lab\n在命令行中输入指令：\nvue create CGM_front\n◉ Babel\n◯ TypeScript\n◯ Progressive Web App (PWA) Support\n◉ Router\n›◉ Vuex\n◉ CSS Pre-processors\n◯ Linter &#x2F; Formatter\n◯ Unit Testing\n◯ E2E Testing\n\n接下来的步骤如下：\n\n!\n!\n!\n!\n!\n4.将创建好的项目导入至VSCode\n导入后打开VSCode的终端安装axios（和SpringBoot项目后端进行交互的依赖）\n安装axios：\ncnpm install axios --save\n\n启动Vue项目：\ncnpm run serve\n\n项目创建成功：\n!\n更多Vue前端项目与后端交互内容还需要配置axios、router等详情见课程笔记内容。\naxios解决跨域问题：\n在vue.config.js文件中加入\ntranspileDependencies: true,\n  devServer: &#123;\n    port: 8080,(本机前端端口)\n    //解决跨域问题\n    proxy: &#123;\n      api: &#123;\n        target: \"http://127.0.0.1:8081\",(所发送请求的后端目标端口)\n        changeOrigin: true,\n        ws: true,\n      &#125;,\n    &#125;,\n  &#125;,\n\n!\n","slug":"Vue创建前端项目","date":"2023-07-03T10:01:36.000Z","categories_index":"","tags_index":"Vue","author_index":"kh"},{"id":"93025a4f2374660189de73b8dfba4cb2","title":"SpringBoot项目创建及可能创建中可能遇到的问题","content":"SpringBoot项目创建步骤及可能遇到的问题1、SpringBoot项目创建（在线创建）注：通过SpringBoot项目在线网站创建项目过程，以及项目创建后可能会遇到的问题\n项目创建过程：\n\n进入到SpringBoot项目在线创建网站，输入下图中相应的信息，在线网站为：https://start.spring.io/，java的版本根据自身安装的版本，我的电脑安装的是JDK8，所以要选择java 8\n\n\n生成一个压缩包，解压后得到的项目文件，在idea中打开项目文件；\n2.java文件下可能会出现橙色小J，无法识别为maven项目\n\n所有java文件左下角显示橙色的小J，正常应该是蓝色。原因是idea进行加载时没有按照Source Root进行识别。\n解决办法：\n点击文件——》项目结构，英文版的为File——》Projeco Structure\n\n在Project Structure页面 选择 Project Settings下的 Modules,点击右侧删除项目Contect Root\n\n点击Add Content Root 选择项目路径java文件夹\n\n添加后如图标识完成\n\n确认会到项目界面,显示正常\n\n3.解决完了小J的问题后项目结构显示为，可以看到，Demo2Application.java文件下面出现红线。并且build出现报错\n\n原因：maven版本和idea的版本冲突\n解决办法：\n查询idea版本和maven的版本\n\n\n\n由上图可知，idea的版本为2020.2，maven的版本为3.8.6\n经过查询可知，idea2020.2的版本最适配的maven为3.6.3，而在我的电脑中是安装了这个版本的，所以更换maven的版本。\n\n但是！！！更换完maven的版本后，同样报错！！！\n\n而且同时出现了和奇妙的问题，重新打开idea时，配置中的maven又会自动变为3.8.6;\n直到发现上面那个问题，我意识到，这个新建的项目里，应该是在某个地方，对maven版本进行了设定。然后就查看新项目里的文件。最后终于被我找到了。。。\n\n在这个位置，IDEA对SpringBoot项目中会自动设定maven的版本，所以当爸distrubutionUrl中的内容改成3.6.3，并重新加载一下maven就解决了这个问题\n\n\n完结！！希望能解决大家的问题！！\n","slug":"SpringBoot项目创建及可能创建中可能遇到的问题","date":"2023-06-10T13:32:58.000Z","categories_index":"","tags_index":"SpringBoot","author_index":"kh"},{"id":"754c7ac865a1dfe8328add3fcf102e2d","title":"Github上传和Hexo部署","content":"一、Hexo部署和常用命令前提：已安装git和node.js\n\n在 GitHub 上创建一个新的 repository，名称必须为 username.github.io（其中 “username” 是你在 GitHub 上的用户名）。\n\n确保你本地安装 Git 工具，然后打开 Git Bash 终端。\n\n输入以下命令拉取托管空间\ngit clone https:&#x2F;&#x2F;github.com&#x2F;username&#x2F;username.github.io.git\n\n​      这将会在本地创建一个名为 username.github.io 的文件夹，我们称之为空间文件夹。\n4.确保本地安装了 Node.js ，在 Git Bash 终端中输入以下命令来安装 Hexo：\nnpm install -g hexo-cli\nhexo init myBlog\ncd myBlog\nnpm install\n\n5.在命令行终端中，输入以下命令来安装 GitHub 部署插件：\nnpm install hexo-deployer-git --save\n\n6.修改 _config.yml 文件，打开编辑器，输入以下命令：\ndeploy:\n  type: git\n  repo: https:&#x2F;&#x2F;github.com&#x2F;username&#x2F;username.github.io.git\n  branch: gh-pages(注意这个分支也可以为main)\n\n7.新建一篇文章\nhexo new &quot;My New Post&quot;\n\n8.在 Git Bash 终端中，执行以下命令预览并生成博客：\nhexo generate\nhexo server\n\n9.该命令将在本地启动一个网站，网址为 http://localhost:4000，打开浏览器窗口后输入该网址可以看到博客。\n10.确认无误后，在 Git Bash 终端中执行以下命令进行部署：\nhexo deploy\n\n完成后，刷新你的空间页面即可看到新写的博客。注意不要忘记提交源文件到 GitHub 上的 “master” 分支，部署博客到 GitHub 上的 “gh-pages” 分支，否则空间页不会被更新。希望这个指南对你有所帮助。\n二、项目上传至github仓库中1.创建github repository1-1登录github\n如果不是纯纯小白，那么github账号应该是有的吧\n1-2创建repository（仓库）\n\n输入相应信息，输入项目名称\n\n1-3复制一下，待会有用\n\n2.开始上传项目2-1右键要上传的项目，选择git bash here\n\n2-2输入git init，在当前项目的目录中生成本地的git管理（会发现在当前目录下多了一个.git文件夹）\n\n\n2-3输入git add .这个是将项目上所有的文件添加到仓库中的意思，如果想添加某个特定的文件，只需把“.”换成这个特定的文件名即可。\n\n2-4用git status 可以查看当前仓库的提交状态(这一步可以忽略，只是查看提交到本地的代码是否成功);\n\n2-5然后输入git commit -m &quot;提交信息&quot; （提交的信息是你的项目说明）\n这里如果出现以下内容，则需要你输入自己的账号或名字。（注： git commit 后面加 -m 表示可以直接输入提交说明，如果不加 -m ，直接输入git commit，就会弹出一个类似于 vim 的界面，让你输入提交说明。)有些刚开使用的用户输入提交时会出现错误，如下图：\n\n要先全局配置好在git上的用户名和邮箱，如下图所示输入命令配置邮箱：git config --global user.email &quot;邮箱&quot;\n\n配置用户名：git config --global user.name &quot;名字&quot;\n\n然后再输入提交的命令git commit -m &quot;提交信息&quot; ，如图显示：\n\n2-6、输入git remote add origin https://自己的仓库url地址（上面有说到），将本地的仓库关联到github上。\n\n2-7最后输入命令git push -u origin master（此操作目的是把本地仓库push到github上面，此步骤需要你输入登录github上的帐号和密码）如出现连接失败问题时，简单一点的操作就是再重新输入几次该命令，也可以百度报错信息搜索其他办法解决此问题。\n\n注：弹出这个Connect to Github的框时，可以到github上申请一个token（很简单，可自行百度），不然直接关闭输入github的邮箱和密码很容易报错。\n2-8上传成功。刷新github上的仓库界面成功显示出来了。\n\n\n3.关于图片上传时显示不出的问题解决办法：\n在source目录下创建images文件夹；\n将所需要上传显示的图片存入到images文件夹下；\n在md文件中使用图片引用方式为：，这种方式在md文件中不会显示，但是上传后能够显示。\n\n4.关于后期如何快速使用hexo上传自己的文章回顾\n创建新文件：在hexo项目右键打开git bush终端；\n\n输入命令：hexo new “新的文章名”；\n\n在post中编辑md文件，也就是写文章；\n\n上传静态： 依次输入hexo clean、hexo generate、hexo serve测试在静态页面中是否有效；\n\n上传github：hexo deploy；\n\n\n","slug":"Github上传和Hexo部署","date":"2023-06-03T13:53:25.000Z","categories_index":"","tags_index":"git","author_index":"kh"}]